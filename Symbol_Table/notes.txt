function:
    



program:




var:
    K_INTEGER IDENTIFIER SEMI
    |
    K_INTEGER ass
    |
    K_STRING IDENTIFIER SEMI
    |
    K_STRING ass
    ;

ass:
    IDENTIFIER ASSIGN ICONSTANT SEMI
    |
    IDENTIFIER ASSIGN SCONSTANT SEMI
    |
    IDENTIFIER ASSIGN DCONSTANT SEMI
    ;

ret_t:
    K_INTEGER
    |
    K_STRING
    |
    ;

print:
    K_PRINT_INTEGER LPAREN IDENTIFIER RPAREN SEMI
    |
    K_PRINT_STRING LPAREN IDENTIFIER RPAREN SEMI
    |
    K_PRINT_INTEGER LPAREN ICONSTANT RPAREN SEMI
    |
    K_PRINT_STRING LPAREN SCONSTANT RPAREN SEMI
    ;
    

program, function, iconstant, print_integer, print_string, identifier




##############################################################################
# Compilers Project Makefile
# Written By Matthew Pru and Cody Sloan
##############################################################################
CC=gcc
LEXER=PruSloanLexer
OUTPUT=PS_Parser_Out.txt

all: $(BUILD)
	./$(BUILD) < simple | tee $(OUTPUT)

$(BUILD): lex.yy.c y.tab.c
	${CC} lex.yy.c y.tab.c -ly -ll -o $(BUILD)

y.tab.c:
	yacc -d PSSimParser.yacc

lex.yy.c:
	lex PSlexer.l

clean: 
	rm -f *.o lex.yy.c $(BUILD) $(OUTPUT)


// full lexer

%{
#include "y.tab.h"
#include <string.h>
%}

%%
[ \t\n\r]                                                       ;
"do"                                                        return K_DO;
"double"                                                    return K_DOUBLE;
"else"                                                      return K_ELSE;
"exit"                                                      return K_EXIT;
"function"                                                  return K_FUNCTION;
"if"                                                        return K_IF;
"integer"                                                   return K_INTEGER;
"print_double"                                              return K_PRINT_DOUBLE;
"print_integer"                                             return K_PRINT_INTEGER;
"print_string"                                              return K_PRINT_STRING;
"procedure"                                                 return K_PROCEDURE;
"program"                                                   return K_PROGRAM;
"read_double"                                               return K_READ_DOUBLE;
"read_integer"                                              return K_READ_INTEGER;
"read_string"                                               return K_READ_STRING;
"return"                                                    return K_RETURN;
"string"                                                    return K_STRING;
"then"                                                      return K_THEN;
"while"                                                     return K_WHILE;
-?((([0-9]*\.[0-9]+)|([0-9]+\.[0-9]*))([dD][-+]?[0-9]+)?)   return DCONSTANT;
[A-Za-z0-9$_]{0,32}                                         return IDENTIFIER;
[0-9]*                                                      return ICONSTANT;
"\""([^\n\"\\]*(\\[.\n])*)*"\""                             return SCONSTANT;
:=                                                          return ASSIGN;
\+=                                                         return ASSIGN_PLUS;
\-=                                                         return ASSIGN_MINUS;
\*=                                                         return ASSIGN_MULTIPLY;
\/=                                                         return ASSIGN_DIVIDE;
\%=                                                         return ASSIGN_MOD;
,                                                           return COMMA;
\/\/                                                        return COMMENT;
&&                                                          return DAND;
\/                                                          return DIVIDE;
\|\|                                                        return DOR;
==                                                          return DEQ;
\>=                                                         return GEQ;
\>                                                          return GT;
\[                                                          return LBRACKET;
\<=                                                         return LEQ;
\{                                                          return LCURLY;
\(                                                          return LPAREN;
\<                                                          return LT;
\-                                                          return MINUS;
\-\-                                                        return DECREMENT;
\%                                                          return MOD;
\*                                                          return MULTIPLY;
\!=                                                         return NE;
\!                                                          return NOT;
\.                                                          return PERIOD;
\+                                                          return PLUS;
\+\+                                                        return INCREMENT;
\]                                                          return RBRACKET;
\}                                                          return RCURLY;
\)                                                          return RPAREN;
;                                                           return SEMI;
%%

int main(int argc, char **argv){
    int token;
    printf("Token:\t\tMatch:\n");
    while ((token=yylex()) != 0){
        printf("%d\t\t%s\n", token, yytext);
    }
    return 0;
}

original complex sconstant:
"\""([^\n\"\\]*(\\[.\n])*)*"\""                             printf("SCONSTANT-> %s\n",yytext);//return SCONSTANT;





%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    int yyerror(char *msg){
        printf("Invalid Program: %s\n", msg);
        exit(0);
    }
    int yylex();
    int nodeCount = 0;
    int st_loc=0;
    char[16] use;
    //Symbol Table stuff
    struct stEntry{
        char* name;
        char* d_type;
        char* use;
        //char* val;
        int line_no;
    } symbolTable[2048];

    void insert(){
        strcpy(use, yytext);
    }

    void newSymbol(char c){
        int q=search(yytext)
        if(!q)/*?*/{
            switch(c){
                case 'V':

                    st_loc++;
                    break;
                case 'H':

                    st_loc++;
                    break;
                case 'C':

                    st_loc++;
                    break;
                case 'K'

                    st_loc++;
                    break;
                case 'F':

                    st_loc++;
                    break;

            }
        }
    }

    int search(char* use){
        for(int i=0; i<st_loc; i++){
            if(strcmp(symbol_table[i], use)==0){
                return -1;
            }
        }
        return 0;
    }



%}

%union {
    int iVal;
    double dVal;
    char  *sVal;
}

%type<sVal> IDENTIFIER SCONSTANT expr param_list block d_type var assignment task function procedure print
%type<iVal> ICONSTANT
%type<dVal> DCONSTANT

%token K_DO K_DOUBLE K_ELSE K_EXIT K_FUNCTION K_IF K_INTEGER K_PRINT_DOUBLE K_PRINT_INTEGER K_PRINT_STRING K_PROCEDURE K_PROGRAM K_READ_DOUBLE K_READ_INTEGER K_READ_STRING K_RETURN K_STRING K_THEN K_WHILE ASSIGN ASSIGN_PLUS ASSIGN_MINUS ASSIGN_MULTIPLY ASSIGN_DIVIDE ASSIGN_MOD COMMA COMMENT DAND DIVIDE DOR DEQ GEQ GT LBRACKET LEQ LCURLY LPAREN LT MINUS DECREMENT MOD MULTIPLY NE NOT PERIOD PLUS INCREMENT RBRACKET RCURLY RPAREN SEMI IDENTIFIER SCONSTANT ICONSTANT DCONSTANT
%left MINUS PLUS
//%left DIVIDE MULTIPLY
%start statement

%%
statement: 
    program { printf("Valid Program\n");
                  exit(0);  };

program: K_PROGRAM IDENTIFIER LCURLY task RCURLY
    {
        printf("Node %d: Reduced: program: K_PROGRAM IDENTIFIER LCURLY task RCURLY\n", nodeCount++);
        printf("\t Terminal Symbol: K_PROGRAM\n");
        printf("\t IDENTIFIER -> %s\n", $2);
        printf("\t Terminal Symbol: LCURLY\n");
        printf("\t task -> %s\n", $4);
        printf("\t Terminal Symbol: RCURLY\n");
    };

task: function
    {
        printf("Node %d: Reduced: task: function\n", nodeCount++);
        printf("\t function -> %s\n", $1);
        $$ = "function";
    }
    | procedure
    {
        printf("Node %d: Reduced: task: procedure\n", nodeCount++);
        printf("\t procedure -> %s\n", $1);
        $$ = "procedure";
    }
    | task function
    {
        printf("Node %d: Reduced: task: task function\n", nodeCount++);
        printf("\t task -> %s\n", $1);
        printf("\t function -> %s\n", $2);
        $$ = "task function";
    }
    | task procedure
    {
        printf("Node %d: Reduced: task: task procedure\n", nodeCount++);
        printf("\t task -> %s\n", $1);
        printf("\t procedure -> %s\n", $2);
        $$ = "task procedure";
    }
    ;

procedure:
    K_PROCEDURE IDENTIFIER LPAREN param_list RPAREN LCURLY block RCURLY
    {
        printf("Node %d: Reduced: procedure: K_PROCEDURE IDENTIFIER LPAREN param_list RPAREN LCURLY block RCURLY\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_PROCEDURE\n");
        printf("\t IDENTIFIER -> %s\n", $2);
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t param_list -> %s\n", $4);
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: LCURLY\n");
        printf("\t block -> %s\n", $7);
        printf("\t Terminal Symbol: RCURLY\n");
        $$ = "K_PROCEDURE IDENTIFIER LPAREN param_list RPAREN LCURLY block RCURLY";
    }
    |
    K_PROCEDURE IDENTIFIER LPAREN RPAREN LCURLY block RCURLY
    {
        printf("Node %d: Reduced: procedure: K_PROCEDURE IDENTIFIER LPAREN RPAREN LCURLY block RCURLY\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_PROCEDURE\n");
        printf("\t IDENTIFIER -> %s\n", $2);
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: LCURLY\n");
        printf("\t block -> %s\n", $6);
        printf("\t Terminal Symbol: RCURLY\n");
        $$ = "K_PROCEDURE IDENTIFIER LPAREN RPAREN LCURLY block RCURLY";
    }
    ;

function: 
    K_FUNCTION d_type IDENTIFIER LPAREN param_list RPAREN LCURLY block RCURLY
    {
        printf("Node %d: Reduced: function: K_FUNCTION d_type IDENTIFIER LPAREN param_list RPAREN LCURLY block RCURLY\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_FUNCTION\n");
        printf("\t d_type -> %s\n", $2);
        printf("\t IDENTIFIER -> %s\n", $3);
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t param_list -> %s\n", $5);
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: LCURLY\n");
        printf("\t block -> %s\n", $8);
        printf("\t Terminal Symbol: RCURLY\n");
        $$ = "K_FUNCTION d_type IDENTIFIER LPAREN param_list RPAREN LCURLY block RCURLY";
    }
    |
    K_FUNCTION d_type IDENTIFIER LPAREN RPAREN LCURLY block RCURLY
    {
        printf("Node %d: Reduced: function: K_FUNCTION d_type IDENTIFIER LPAREN RPAREN LCURLY block RCURLY\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_FUNCTION\n");
        printf("\t d_type -> %s\n", $2);
        printf("\t IDENTIFIER -> %s\n", $3);
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: LCURLY\n");
        printf("\t block -> %s\n", $7);
        printf("\t Terminal Symbol: RCURLY\n");
        $$ = "K_FUNCTION d_type IDENTIFIER LPAREN RPAREN LCURLY block RCURLY";
    }
    ;

block:
    expr SEMI         
    {
        printf("Node %d: Reduced: block: expr\n", nodeCount++);
        printf("\t expr -> %s\n", $1);
        $$ = "expr";
    }
    |
    print           
    {
        printf("Node %d: Reduced: block: print\n", nodeCount++);
        printf("\t print -> %s\n", $1);
        $$ = "print";
    }
    |
    var             
    {
        printf("Node %d: Reduced: block: var\n", nodeCount++);
        printf("\t var -> %s\n", $1);
        $$ = "var";
    }
    |
    assignment             
    {
        printf("Node %d: Reduced: block: assignment\n", nodeCount++);
        printf("\assignment -> %s\n", $1);
        $$ = "assignment";
    }
    |
    expr SEMI block      
    {
        printf("Node %d: Reduced: block: expr block\n", nodeCount++);
        printf("\t expr -> %s\n", $1);
        printf("\t block -> %s\n", $3);
        $$ = "expr block";
    }
    |
    print block     
    {
        printf("Node %d: Reduced: block: print block\n", nodeCount++);
        printf("\t print -> %s\n", $1);
        printf("\t block -> %s\n", $2);
        $$ = "print block";
    }
    |
    var block       
    {
        printf("Node %d: Reduced: block: var block\n", nodeCount++);
        printf("\t var -> %s\n", $1);
        printf("\t block -> %s\n", $2);
        $$ = "var block";
    }
    |
    assignment block       
    {
        printf("Node %d: Reduced: block: assignment block\n", nodeCount++);
        printf("\t assignment -> %s\n", $1);
        printf("\t block -> %s\n", $2);
        $$ = "assignment block";
    }
    |
    epsilon     {printf("\t block Exit"); $$ = "epsilon";}
    ;

print:
    K_PRINT_INTEGER LPAREN ICONSTANT RPAREN SEMI
    {
        printf("Node %d: Reduced: print: K_PRINT_INTEGER LPAREN ICONSTANT RPAREN SEMI\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_PRINT_INTEGER\n");
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t ICONSTANT -> %d\n", $3);
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "K_PRINT_INTEGER LPAREN ICONSTANT RPAREN SEMI";
    }
    |
    K_PRINT_STRING LPAREN SCONSTANT RPAREN SEMI
    {
        printf("Node %d: Reduced: print: K_PRINT_STRING LPAREN SCONSTANT RPAREN SEMI\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_PRINT_STRING\n");
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t SCONSTANT -> %s\n", $3);
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "K_PRINT_STRING LPAREN SCONSTANT RPAREN SEMI";
    }
    |
    K_PRINT_INTEGER LPAREN IDENTIFIER RPAREN SEMI
    {
        printf("Node %d: Reduced: print: K_PRINT_INTEGER LPAREN IDENTIFIER RPAREN SEMI\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_PRINT_INTEGER\n");
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t IDENTIFIER -> %s\n", $3);
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "K_PRINT_INTEGER LPAREN IDENTIFIER RPAREN SEMI";
    }
    |
    K_PRINT_STRING LPAREN IDENTIFIER RPAREN SEMI
    {
        printf("Node %d: Reduced: print: K_PRINT_STRING LPAREN IDENTIFIER RPAREN SEMI\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_PRINT_STRING\n");
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t IDENTIFIER -> %s\n", $3);
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "K_PRINT_STRING LPAREN IDENTIFIER RPAREN SEMI";
    }
    |
    K_PRINT_INTEGER LPAREN expr RPAREN SEMI
    {
        printf("Node %d: Reduced: print: K_PRINT_INTEGER LPAREN expr RPAREN SEMI\n",
        nodeCount++);
        printf("\t Terminal Symbol: K_PRINT_INTEGER\n");
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\expr -> %s\n", $3);
        printf("\t Terminal Symbol: RPAREN\n");
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "K_PRINT_INTEGER LPAREN expr RPAREN SEMI";
    }
    ;

var:
    d_type IDENTIFIER SEMI
    {
        printf("Node %d: Reduced: var: d_type IDENTIFIER SEMI\n", nodeCount++);
        printf("\t d_type -> %s\n", $1);
        printf("\t IDENTIFIER -> %s\n", $2);
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "d_type IDENTIFIER SEMI";
    }
    |
    d_type assignment
    {
        printf("Node %d: Reduced: var: d_type assignment\n", nodeCount++);
        printf("\t d_type -> %s\n", $1);
        printf("\t assignment -> %s\n", $2);
        $$ = "d_type assignment";
    }
    ;

assignment:
    IDENTIFIER ASSIGN ICONSTANT SEMI
    {
        printf("Node %d: Reduced: assignment: IDENTIFIER ASSIGN ICONSTANT SEMI\n", 
        nodeCount++);
        printf("\t IDENTIFIER -> %s\n", $1);
        printf("\t Terminal Symbol: ASSIGN\n");
        printf("\t ICONSTANT -> %d\n", $3);
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "IDENTIFIER ASSIGN ICONSTANT SEMI";
    }
    |
    IDENTIFIER ASSIGN SCONSTANT SEMI
    {
        printf("Node %d: Reduced: assignment: IDENTIFIER ASSIGN SCONSTANT SEMI\n", 
        nodeCount++);
        printf("\t IDENTIFIER -> %s\n", $1);
        printf("\t Terminal Symbol: ASSIGN\n");
        printf("\t SCONSTANT -> %s\n", $3);
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "IDENTIFIER ASSIGN SCONSTANT SEMI";
    }
    |
    IDENTIFIER ASSIGN expr SEMI
    {
        printf("Node %d: Reduced: assignment: IDENTIFIER ASSIGN expr SEMI\n", 
        nodeCount++);
        printf("\t IDENTIFIER -> %s\n", $1);
        printf("\t Terminal Symbol: ASSIGN\n");
        printf("\t expr -> %s\n", $3);
        printf("\t Terminal Symbol: SEMI\n");
        $$ = "IDENTIFIER ASSIGN expr SEMI";
    }
    ;
    

d_type:
    K_INTEGER                   
    {
        printf("Node %d: Reduced: d_type: K_INTEGER\n", nodeCount++);
        printf("\t Terminal Symbol: K_INTEGER\n");
        $$ = "K_INTEGER";
    }
    |
    K_STRING                    
    {
        printf("Node %d: Reduced: d_type: K_STRING\n", nodeCount++);
        printf("\t Terminal Symbol: K_STRING\n");
        $$ = "K_STRING";
    }
    ;

expr:
    ICONSTANT                   
    {
        printf("Node %d: Reduced: expr: ICONSTANT\n", nodeCount++);
        printf("\t Terminal Symbol: ICONSTANT\n");
        $$ = "ICONSTANT";
    }
    |
    IDENTIFIER
    {
        printf("Node %d: Reduced: expr: IDENTIFIER\n", nodeCount++);
        printf("IDENTIFIER -> %s\n", $1);
        $$ = "IDENTIFIER";
    }
    |
    expr MINUS expr             
    {
        printf("Node %d: Reduced: expr: expr MINUS expr\n", nodeCount++);
        printf("\t expr-> %s\n", $1);
        printf("\t Terminal Symbol: MINUS\n");
        printf("\t expr -> %s\n", $3);
        $$ = "expr MINUS expr";
    }
    |
    expr PLUS expr              
    {
        printf("Node %d: Reduced: expr: expr PLUS expr\n", nodeCount++);
        printf("\t expr-> %s\n",$1);
        printf("\t Terminal Symbol: PLUS\n");
        printf("\t expr -> %s\n", $3);
        $$ = "expr PLUS expr";
    }
    |
    LPAREN expr RPAREN          
    {
        printf("Node %d: Reduced: expr: LPAREN expr RPAREN\n", nodeCount++);
        printf("\t Terminal Symbol: LPAREN\n");
        printf("\t expr -> %s\n", $2);
        printf("\t Terminal Symbol: RPAREN\n");
        $$ = "LPAREN expr RPAREN";
    }
    ;


param_list:
    d_type IDENTIFIER                       
    {
        printf("Node %d: Reduced: param_list: d_type IDENTIFIER\n", nodeCount++);
        printf("\t d_type -> %s\n", $1);
        printf("\t IDENTIFIER -> %s\n", $2);
        $$ = "d_type IDENTIFIER";
    }
    |
    d_type IDENTIFIER COMMA param_list      
    {
        printf("Node %d: Reduced: param_list: d_type IDENTIFIER COMMA param_list\n",
        nodeCount++);
        printf("\t d_type -> %s\n", $1);
        printf("\t IDENTIFIER -> %s\n", $2);
        printf("\t Terminal Symbol: COMMA\n");
        printf("\t param_list -> %s\n", $4);
        $$ = "d_type IDENTIFIER COMMA param_list";
    }
    ;

epsilon: ;

%%
extern FILE* yyin;
extern int line;
int main(int argc ,char** argv){
    do {
        /* printf("++++++++++++++++++++++++++++++++++++++++++++++++\n");
        printf("Walking through the Parse Tree Begins Here\n");
        printf("++++++++++++++++++++++++++++++++++++++++++++++++\n");  */
        yyparse();
    } while ( !feof( yyin ) );
    // code generator goes here
}



// Our failed Symbol table code:
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    int yyerror(char *msg){
        printf("Invalid Program: %s\n", msg);
        exit(0);
    }
    // extern yylval
    int yylex();
    extern char* yytext;
    extern int line;
    extern FILE* yyin;
    // int nodeCount = 0;
    int st_loc=0;
    char useBuff[16];
    //Symbol Table stuff

    struct stEntry{
        char* name;
        char* d_type;
        char* use;
        char* val;
        int intval;
        float dubval;
        int line_no;
    } symbolTable[48];

    void insert(){
        strcpy(useBuff, yytext);
    }

    int searchS(char* in){
        for(int i=0; i<st_loc; i++){
            if((strcmp(symbolTable[i].use, "ICONSTANT") != 0) && (strcmp(symbolTable[i].use, "DCONSTANT") != 0)){
                if(strcmp(symbolTable[i].name, in)==0){
                    return -1;
                    break;
                }
            }
        }
        return 0;
    }

    int searchI(int in){
        for(int i=0; i<st_loc; i++){
            if(strcmp(symbolTable[i].use, "ICONSTANT")==0)
            {
                if(symbolTable[i].intval==in){
                    return -1;
                    break;
                }
            }
        }
        return 0;
    }

    int searchD(double in){
         for(int i=0; i<st_loc; i++){
            if(strcmp(symbolTable[i].use, "DCONSTANT")==0)
            {
                if(symbolTable[i].dubval==in){
                    return -1;
                    break;
                }
            }
        }
        return 0;
    }




    void newSymbol(char c){
        int q;
        switch(c){
            case 'V':
                q=searchS(yylval.sVal);
                if(!q){
                    symbolTable[st_loc].name=yylval.sVal;
                    symbolTable[st_loc].d_type=strdup(useBuff);
                    symbolTable[st_loc].line_no=line;
                    symbolTable[st_loc].use=strdup("IDENTIFIER");
                    st_loc++;
                    break;
                }
            case 'P':
                q=searchS(yylval.sVal);
                if(!q){
                    symbolTable[st_loc].name=yylval.sVal;        
                    symbolTable[st_loc].d_type=strdup(useBuff);    
                    symbolTable[st_loc].line_no=line;    
                    symbolTable[st_loc].use=strdup("PROCEDURE");
                    st_loc++;
                    break;
                }
            case 'I':
                q=searchI(yylval.iVal);
                if(!q){
                    symbolTable[st_loc].intval=yylval.iVal;
                    symbolTable[st_loc].d_type=strdup("CONST");
                    symbolTable[st_loc].line_no=line;
                    symbolTable[st_loc].use=strdup("ICONSTANT");
                    st_loc++;
                    break;
                }
            case 'D':
                q=searchD(yylval.dVal);
                if(!q){
                    symbolTable[st_loc].dubval=yylval.dVal;
                    symbolTable[st_loc].d_type=strdup("CONST");
                    symbolTable[st_loc].line_no=line;
                    symbolTable[st_loc].use=strdup("DCONSTANT");
                    st_loc++;
                    break;
                }
            case 'S':
                q=searchS(yylval.sVal);
                if(!q){
                    symbolTable[st_loc].name=yylval.sVal;
                    symbolTable[st_loc].d_type=strdup("CONST");
                    symbolTable[st_loc].line_no=line;
                    symbolTable[st_loc].use=strdup("SCONSTANT");
                    st_loc++;
                    break;
                }
            case 'F':
                q=searchS(yylval.sVal);
                if(!q){
                    symbolTable[st_loc].name=yylval.sVal;
                    symbolTable[st_loc].d_type=strdup(useBuff);
                    symbolTable[st_loc].line_no=line;
                    symbolTable[st_loc].use=strdup("FUNCTION");
                    st_loc++;
                    break;
                }

        }
    }
%}

%union {
    int iVal;
    double dVal;
    char  *sVal;
}

%type<sVal> IDENTIFIER SCONSTANT 
%type<iVal> ICONSTANT
%type<dVal> DCONSTANT


%token K_DO K_DOUBLE K_ELSE K_EXIT K_FUNCTION K_IF K_INTEGER K_PRINT_DOUBLE K_PRINT_INTEGER K_PRINT_STRING K_PROCEDURE K_PROGRAM K_READ_DOUBLE K_READ_INTEGER K_READ_STRING K_RETURN K_STRING K_THEN K_WHILE ASSIGN ASSIGN_PLUS ASSIGN_MINUS ASSIGN_MULTIPLY ASSIGN_DIVIDE ASSIGN_MOD COMMA COMMENT DAND DIVIDE DOR DEQ GEQ GT LBRACKET LEQ LCURLY LPAREN LT MINUS DECREMENT MOD MULTIPLY NE NOT PERIOD PLUS INCREMENT RBRACKET RCURLY RPAREN SEMI IDENTIFIER SCONSTANT ICONSTANT DCONSTANT
%left MINUS PLUS
//%left DIVIDE MULTIPLY
%start statement

%%
statement: 
    program { printf("Valid Program\n");
                  exit(0);  };

program: K_PROGRAM  IDENTIFIER{newSymbol('V');} LCURLY task RCURLY
    ;

task: function{newSymbol('F');}
    | procedure{newSymbol('P');}
    | task function{newSymbol('F');}
    | task procedure{newSymbol('P');}
    ;

procedure:
    K_PROCEDURE IDENTIFIER{newSymbol('V');} LPAREN param_list RPAREN LCURLY block RCURLY
    | K_PROCEDURE{newSymbol('P');} IDENTIFIER{newSymbol('V');} LPAREN RPAREN LCURLY block RCURLY///////////////////////////////////////////////////////////////////////
    ;

function: 
    K_FUNCTION{newSymbol('F');} d_type IDENTIFIER{newSymbol('V');} LPAREN param_list RPAREN LCURLY block RCURLY
    | K_FUNCTION{newSymbol('F');} d_type IDENTIFIER{newSymbol('V');} LPAREN RPAREN LCURLY block RCURLY///////////////////////////////////////////////////////////////////////
    ;

block:
    print           
    {printf("!");}
    | var             
    {printf("!");}
    | assignment             
    {printf("!");}
    | print block     
    {printf("!");}
    | var block       
    {printf("!");}
    | assignment block       
    {printf("!");}
    | epsilon     
   {printf("!");}
    ;

print:
    K_PRINT_INTEGER LPAREN ICONSTANT{newSymbol('I');} RPAREN SEMI
    | K_PRINT_DOUBLE LPAREN DCONSTANT{newSymbol('D');} RPAREN SEMI
    | K_PRINT_STRING LPAREN SCONSTANT{newSymbol('S');} RPAREN SEMI
    | K_PRINT_INTEGER LPAREN IDENTIFIER{newSymbol('V');} RPAREN SEMI
    | K_PRINT_DOUBLE LPAREN IDENTIFIER{newSymbol('V');} RPAREN SEMI
    | K_PRINT_STRING LPAREN IDENTIFIER{newSymbol('V');} RPAREN SEMI
    | K_PRINT_INTEGER LPAREN expr RPAREN SEMI
    {printf("!");}
    ;

var:
    d_type IDENTIFIER{newSymbol('V');} SEMI
    |d_type assignment
    {printf("!");}
    ;

assignment:
    IDENTIFIER{newSymbol('V');} ASSIGN ICONSTANT{newSymbol('I');} SEMI
    | IDENTIFIER{newSymbol('V');} ASSIGN DCONSTANT{newSymbol('D');} SEMI///////////////////////////////////////////////////////////////////////
    | IDENTIFIER{newSymbol('V');} ASSIGN SCONSTANT{newSymbol('S');} SEMI///////////////////////////////////////////////////////////////////////
    | IDENTIFIER{newSymbol('V');} ASSIGN expr SEMI///////////////////////////////////////////////////////////////////////
    ;
    

d_type:
    K_INTEGER{insert();}
    |K_STRING{insert();}
    |K_DOUBLE{insert();}
    ;

expr:
    ICONSTANT{newSymbol('I');}
    | DCONSTANT{newSymbol('D');}
    | IDENTIFIER{newSymbol('V');}
    | expr MINUS expr             
    {printf("!");}
    | expr PLUS expr              
    {printf("!");}
    | LPAREN expr RPAREN          
    {printf("!");}
    ;


param_list:
    d_type IDENTIFIER{newSymbol('V');}                       
    | d_type IDENTIFIER{newSymbol('V');} COMMA param_list      
    ;

epsilon: {printf("!");};

%%

int main(int argc ,char** argv){
    do {
        /* printf("++++++++++++++++++++++++++++++++++++++++++++++++\n");
        printf("Walking through the Parse Tree Begins Here\n");
        printf("++++++++++++++++++++++++++++++++++++++++++++++++\n");  */
        yyparse();
    } while ( !feof( yyin ) );
    for (int i=0;i<st_loc;i++){
/////////////////////////////////////////////////////name
        if(symbolTable[i].name){
            printf("%s",symbolTable[i].name);
            printf("\t");
        }
        else{
            printf("\t\t");
        }
/////////////////////////////////////////////////////data type
        if(symbolTable[i].d_type){
            printf("%s",symbolTable[i].d_type);
            printf("\t");
        }
        else{
            printf("\t\t");
        }
/////////////////////////////////////////////////////use
        if(symbolTable[i].use){
            printf("%s",symbolTable[i].use);
            printf("\t");
        }
        else{
            printf("\t\t");
        }
/////////////////////////////////////////////////////value
        if(symbolTable[i].val){
            printf("%s",symbolTable[i].val);
            printf("\t");
        }
        else if(symbolTable[i].intval){
            printf("%d",symbolTable[i].intval);
            printf("\t");
        }
        else if(symbolTable[i].dubval){
            printf("%f",symbolTable[i].dubval);
            printf("\t");
        }
        else{
            printf("\t\t");
        }
/////////////////////////////////////////////////////line number
        if(symbolTable[i].line_no){
            printf("%d",symbolTable[i].line_no);
            printf("\t");
        }
        else{
            printf("\t\t");
        }
    }
    // code generator goes here
}


















%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    int yyerror(char *msg){
        printf("Invalid Program: %s\n", msg);
        exit(0);
    }
    int yylex();
    extern char* yytext;
    extern int line;
    // int nodeCount = 0;
    int st_count=0;
    char useBuff[16];
    //Symbol Table stuff

    struct stEntry{
        char* name;
        char* d_type;
        char* use;
        int intval;
        float dubval;
        int line_no;
    } symbolTable[48];

    void insert();
    int search_S(char*);
    int search_I(int);
    int search_D(double);
    void newSymbol_S(char, char*);
    void newSymbol_I(int);
    void newSymbol_D(double);
%}

%union {
    int iVal;
    double dVal;
    char  *sVal;
}

%type<sVal> IDENTIFIER SCONSTANT 
%type<iVal> ICONSTANT
%type<dVal> DCONSTANT

%token K_DO K_DOUBLE K_ELSE K_EXIT K_FUNCTION K_IF K_INTEGER K_PRINT_DOUBLE K_PRINT_INTEGER K_PRINT_STRING K_PROCEDURE K_PROGRAM K_READ_DOUBLE K_READ_INTEGER K_READ_STRING K_RETURN K_STRING K_THEN K_WHILE ASSIGN ASSIGN_PLUS ASSIGN_MINUS ASSIGN_MULTIPLY ASSIGN_DIVIDE ASSIGN_MOD COMMA COMMENT DAND DIVIDE DOR DEQ GEQ GT LBRACKET LEQ LCURLY LPAREN LT MINUS DECREMENT MOD MULTIPLY NE NOT PERIOD PLUS INCREMENT RBRACKET RCURLY RPAREN SEMI IDENTIFIER SCONSTANT ICONSTANT DCONSTANT
%left MINUS PLUS
//%left DIVIDE MULTIPLY
%start statement

%%
statement: 
    program { printf("Valid Program\n"); };

program: K_PROGRAM IDENTIFIER{newSymbol_S('M', $2);}  LCURLY task RCURLY
    /* {
         // Added the M symbol for program. Didn't know what else to put, P was already taken
    } */
    ;

task: function
    | procedure
    | task function
    | task procedure
    ;

procedure:
    K_PROCEDURE IDENTIFIER {newSymbol_S('P', $2);} LPAREN param_list RPAREN LCURLY block RCURLY
    
    | K_PROCEDURE IDENTIFIER{newSymbol_S('P', $2);} LPAREN RPAREN LCURLY block RCURLY
    
    ;

function: 
    K_FUNCTION d_type IDENTIFIER {newSymbol_S('F', $3);} LPAREN param_list RPAREN LCURLY block RCURLY
    | K_FUNCTION d_type IDENTIFIER {newSymbol_S('F', $3);} LPAREN RPAREN LCURLY block RCURLY
    ;

block:
    print           

    | var             

    | assignment             

    | print block     

    | var block       

    | assignment block       

    | epsilon     

    ;

print:
    K_PRINT_INTEGER LPAREN ICONSTANT { newSymbol_I($3); } RPAREN SEMI 
    | K_PRINT_DOUBLE LPAREN DCONSTANT { newSymbol_D($3); } RPAREN SEMI 
    | K_PRINT_STRING LPAREN SCONSTANT { newSymbol_S('S', $3); } RPAREN SEMI 
    | K_PRINT_INTEGER LPAREN IDENTIFIER { newSymbol_S('V', $3); } RPAREN SEMI 
    | K_PRINT_DOUBLE LPAREN IDENTIFIER { newSymbol_S('V', $3); } RPAREN SEMI 
    | K_PRINT_STRING LPAREN IDENTIFIER { newSymbol_S('V', $3); } RPAREN SEMI 
    | K_PRINT_INTEGER LPAREN expr RPAREN SEMI
    ;

var:
    d_type IDENTIFIER{newSymbol_S('V', $2);} SEMI 
    | d_type assignment
    ;

assignment:
    IDENTIFIER {newSymbol_S('V', $1);} ASSIGN ICONSTANT {newSymbol_I($3);} SEMI
    | IDENTIFIER {newSymbol_S('V', $1);} ASSIGN DCONSTANT {newSymbol_D($3);} SEMI
    | IDENTIFIER {newSymbol_S('V', $1);} ASSIGN SCONSTANT {newSymbol_S('S', $3);} SEMI
    | IDENTIFIER { newSymbol_S('V', $1); } ASSIGN expr SEMI 
    ;
    

d_type:
    K_INTEGER { insert(); }
    |K_STRING { insert(); }
    |K_DOUBLE { insert(); }
    ;

expr:
    ICONSTANT { newSymbol_I($1); }
    | DCONSTANT { newSymbol_D($1); }
    | IDENTIFIER { newSymbol_S('V', $1);}
    | expr MINUS expr             
    | expr PLUS expr              
    | LPAREN expr RPAREN   
    ;


param_list:
    d_type IDENTIFIER { newSymbol_S('V', $2); }                       
    | d_type IDENTIFIER{ newSymbol_S('V', $2); }  COMMA param_list  
    ;

epsilon: ;

%%
extern FILE* yyin;

int main(){
    do{
        yyparse();
        printf("\n\n");
        printf("%-25s %-15s %-15s %-15s\n","SYMBOL", "DATATYPE", "TYPE", "LINE NUMBER");
        printf("___________________________________________________________________________\n\n");
        int i = 0;
        for(i=0; i<st_count; i++) {
            if(strcmp(symbolTable[i].use, "ICONSTANT") == 0){
                printf("%-25d %-15s %-15s %-15d\n", symbolTable[i].intval, symbolTable[i].d_type, symbolTable[i].use, symbolTable[i].line_no);
            }
            else if(strcmp(symbolTable[i].use, "DCONSTANT") == 0){
                printf("%-25f %-15s %-15s %-15d\n", symbolTable[i].dubval, symbolTable[i].d_type, symbolTable[i].use, symbolTable[i].line_no);
            }
            else{
                printf("%-25s %-15s %-15s %-15d\n", symbolTable[i].name, symbolTable[i].d_type, symbolTable[i].use, symbolTable[i].line_no);
            }
        }
        for(i=0;i<st_count;i++) {
            free(symbolTable[i].name);
            free(symbolTable[i].d_type);
            free(symbolTable[i].use);
        }
        printf("\n\n");
    }while(!feof(yyin));
    return 0;
}
    void insert(){
        strcpy(useBuff, yytext);
    }

    int search_S(char* in){
        for(int i=0; i<st_count; i++){
            if((strcmp(symbolTable[i].use, "ICONSTANT") != 0) && (strcmp(symbolTable[i].use, "DCONSTANT") != 0)){
                if(strcmp(symbolTable[i].name, in)==0){
                    return -1;
                    break;
                }
            }
        }
        return 0;
    }

    int search_I(int in){
        for(int i=0; i<st_count; i++){
            if(strcmp(symbolTable[i].use, "ICONSTANT")==0)
            {
                if(symbolTable[i].intval==in){
                    return -1;
                    break;
                }
            }
        }
        return 0;
    }

    int search_D(double in){
         for(int i=0; i<st_count; i++){
            if(strcmp(symbolTable[i].use, "DCONSTANT")==0)
            {
                if(symbolTable[i].dubval==in){
                    return -1;
                    break;
                }
            }
        }
        return 0;
    }

    void newSymbol_S(char c, char* stringVal){
        if(!search_S(stringVal)){
            switch(c){
                case 'V':
                    symbolTable[st_count].name=strdup(stringVal);
                    symbolTable[st_count].d_type=strdup(useBuff);
                    symbolTable[st_count].line_no=line;
                    symbolTable[st_count].use=strdup("IDENTIFIER");
                    st_count++;
                    break;
                case 'P':
                    symbolTable[st_count].name=strdup(stringVal);        
                    symbolTable[st_count].d_type=strdup("void");    
                    symbolTable[st_count].line_no=line;    
                    symbolTable[st_count].use=strdup("PROCEDURE");
                    st_count++;
                    break;
                case 'S':
                    symbolTable[st_count].name=strdup(stringVal); 
                    symbolTable[st_count].d_type=strdup("CONST");
                    symbolTable[st_count].line_no=line;
                    symbolTable[st_count].use=strdup("SCONSTANT");
                    st_count++;
                    break;
                case 'F':
                    symbolTable[st_count].name=strdup(stringVal); 
                    symbolTable[st_count].d_type=strdup(useBuff);
                    symbolTable[st_count].line_no=line;
                    symbolTable[st_count].use=strdup("FUNCTION");
                    st_count++;
                    break;
                case 'M':
                    symbolTable[st_count].name=strdup(stringVal); 
                    symbolTable[st_count].d_type=strdup("N/A");
                    symbolTable[st_count].line_no=line;
                    symbolTable[st_count].use=strdup("PROGRAM");
                    st_count++;
                    break;
            }
        }
    }

    void newSymbol_I(int iconstVal){
        if(!search_I(iconstVal)){
            symbolTable[st_count].intval=iconstVal;
            symbolTable[st_count].d_type=strdup("CONST");
            symbolTable[st_count].line_no=line;
            symbolTable[st_count].use=strdup("ICONSTANT");
            st_count++;
        }
    }

    void newSymbol_D(double dconstVal){
        if(!search_D(dconstVal)){
            symbolTable[st_count].dubval=dconstVal;
            symbolTable[st_count].d_type=strdup("CONST");
            symbolTable[st_count].line_no=line;
            symbolTable[st_count].use=strdup("DCONSTANT");
            st_count++;
        }
    }

